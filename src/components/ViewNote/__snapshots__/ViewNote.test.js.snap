// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ViewNote should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ViewNote
    note={
      Object {
        "id": 2,
        "items": Array [
          Object {
            "id": "123",
            "value": "first",
          },
          Object {
            "id": "234",
            "value": "second",
          },
          Object {
            "id": "345",
            "value": "third",
          },
        ],
        "title": "mockTitle",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Link
        to="/notes/2"
      >
        <p
          className="title"
        >
          mockTitle
        </p>
      </Link>,
      "className": "view-note",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <p
            className="title"
          >
            mockTitle
          </p>,
          Array [],
          Array [],
        ],
        "to": "/notes/2",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "mockTitle",
            "className": "title",
          },
          "ref": null,
          "rendered": "mockTitle",
          "type": "p",
        },
      ],
      "type": [Function],
    },
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Link
          to="/notes/2"
        >
          <p
            className="title"
          >
            mockTitle
          </p>
        </Link>,
        "className": "view-note",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <p
              className="title"
            >
              mockTitle
            </p>,
            Array [],
            Array [],
          ],
          "to": "/notes/2",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "mockTitle",
              "className": "title",
            },
            "ref": null,
            "rendered": "mockTitle",
            "type": "p",
          },
        ],
        "type": [Function],
      },
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
